GraphQL Subscription with express and React JS

For this GraphQL Subscription demo we have used graphql-server-express, mysql and React JS Apollo-Client.

In this blog we learn about graphql query,mutation and SUBSCRIPTION using express

First of all we add some useful packages 
    -npm install graphql-tools,graphql-server-express,graphql-subscriptions

    graphql-subscriptions is useful for subscribe changes of data in graphql

Second step we create scema for graphql

    const typeDefs = `
        type Channel {
            id: ID!                # "!" denotes a required field
            name: String
        }

        type Message {
            id: ID!
            text: String
        }

        # This type specifies the entry points into our API
        type Query {
            channels: [Channel]    # "[]" means this is a list of channels
        }

        # The mutation root type, used to define all mutations
        type Mutation {
            addChannel(name: String!): Channel
            updateChannel(id:Int!,name: String!): Channel
            deleteChannel(id:Int!): Channel
        }

        # The subscription root type, specifying what we can subscribe to
        type Subscription {
            channelAdded: Channel
            channelUpdated: Channel
            channelDeleted: Channel
        }
    `;

Than we create a resolver which is useful for excute query,mutation and graphql subscription

    export const resolvers = {
        Query: {
            channels: () => {
            
            }
        },
        Mutation: {
            addChannel: (root, args) => {
            
            }, 
            updateChannel: (root, args) => {
           
            }, 
            deleteChannel: (root, args) => {
           
            }
        },
        Subscription: {
            channelAdded: {
                subscribe: () => pubsub.asyncIterator(CHANNEL_ADDED_TOPIC)
            }
            ....
        }
        };

Now we make excutable scema using scema and resolver
    const schema = makeExecutableSchema({ typeDefs, resolvers });
    export { schema };

Now tricky things is to subscribe changes using graphql so let's i explain this part

    1) First you need to define Subscription type in your schema
         type Subscription {
            channelAdded: Channel
         }
        
    2) Now we use pubsub for pulish and subscribe data like EventEmitter.
        
        import { PubSub } from 'graphql-subscriptions';
        export const pubsub = new PubSub();

    3) Now you need to implement resolver for subscription type to map event using pubsub.asyncIterator
        
        const CHANNEL_ADDED_TOPIC = 'newChannel';
        Subscription: {
            channelAdded: {
                subscribe: () => pubsub.asyncIterator(CHANNEL_ADDED_TOPIC)
            }
        }

    4) Now 4th step is important because Subscription method need to know something changed in our
    database so we add publish method in our code when something changed

        pubsub.publish(CHANNEL_ADDED_TOPIC, { channelAdded: newChannel }); 
        added when create a new channel

        addChannel: (root, args) => {
            return new Promise((resolve, reject) => {
                connection.query('INSERT INTO channel (name) VALUES (?)', [args.name], function (err, rows) {
                if (err) throw err
                const newChannel = { name: args.name, id: rows.insertId };

                pubsub.publish(CHANNEL_ADDED_TOPIC, { channelAdded: newChannel });
                
                resolve(newChannel)
                })
            });
        }